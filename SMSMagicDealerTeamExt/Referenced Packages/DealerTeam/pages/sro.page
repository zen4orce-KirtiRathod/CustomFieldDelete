<apex:page showHeader="true" sidebar="true" title="Service Repair Order" standardController="dealer__Service_Repair_Order__c" extensions="dealer.ServiceRepairOrderView" docType="html-5.0" id="RO2" >

    <!--  jQuery CDN -->
    <apex:includeScript value="//ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js" />
    <!-- <apex:includeScript value="{!URLFOR($Resource.dealer__serializeJSON)}" /> -->

    <!-- INclude Namespaced Bootstrap 3.0 -->
    <apex:includeScript value="{!URLFOR($Resource.dealer__BootstrapNS,'/bootstrap/js/bootstrap.min.js')}"/>
    <apex:stylesheet value="{!URLFOR($Resource.dealer__BootstrapNS,'/bootstrap/css/bootstrap.min.css')}"/>

    <apex:stylesheet value="{!URLFOR($Resource.dealer__BootstrapNS,'/bootstrap/css/dealerteam_bs.css')}"/>
    <!-- KENDO 2015.1.429 -->
    <!--
    <apex:includeScript value="{!URLFOR($Resource.dealer__KendoUiFULL2015,'/js/kendo.all.min.js')}"/>
    <apex:stylesheet value="{!URLFOR($Resource.dealer__KendoUiFULL2015,'/styles/kendo.bootstrap.min.css')}"/>
    <apex:stylesheet value="{!URLFOR($Resource.dealer__KendoUiFULL2015,'/styles/kendo.common-bootstrap.core.min.css')}"/>
    <apex:stylesheet value="{!URLFOR($Resource.dealer__KendoUiFULL2015,'/styles/kendo.common-bootstrap.min.css')}"/>
    -->
    <apex:includeScript value="{!URLFOR($Resource.dealer__KendoUI,'/js/kendo.all.min.js')}"/>
    <apex:stylesheet value="{!URLFOR($Resource.dealer__KendoUI,'/styles/kendo.bootstrap.min.css')}"/>
    <apex:stylesheet value="{!URLFOR($Resource.dealer__KendoUI,'/styles/kendo.common-bootstrap.core.min.css')}"/>
    <apex:stylesheet value="{!URLFOR($Resource.dealer__KendoUI,'/styles/kendo.common-bootstrap.min.css')}"/>  
    <!-- <apex:stylesheet value="{!URLFOR($Resource.KendoUiFULL2015,'/styles/kendo.common.min.css')}"/> -->

    <apex:includeScript value="{!URLFOR($Resource.dealer__MomentJS)}" />

    <!-- FONT-AWESOME -->
    <apex:stylesheet value="//maxcdn.bootstrapcdn.com/font-awesome/4.3.0/css/font-awesome.min.css"/>

    <!-- Header Data -->
    <apex:form id="detailBlock">
        <apex:detail id="detail_id" subject="{!dealer__Service_Repair_Order__c.Id}" showChatter="true" relatedList="false" relatedListHover="true" inlineEdit="true"/>
        <apex:actionFunction action="{!detailUpdate}" name="reloadDetail" reRender="detail_id" />
    </apex:form>

    <!-- NS Boostrap Wrapper -->
    <div id="force">
        <!-- data-row-template="lineTemplate" -->
        <div id="grid" data-role="grid"
            data-toolbar="[{'name': 'create', 'text': 'Add Job Line'}]"
            data-columns="[
                         { 'title': 'Line','field': 'lineNumber', 'width': 40 },
                         { 'title': 'Op Code','field': 'opCode', editor: opCodeList, template: '<span>#=opCodeName#</span>'},
                         { 'title': 'Pay Type', field: 'laborType', 'width': 65, editor: PaymentMethodsList},
                         { 'title': 'Status','field': 'status', 'width': 100, editor: statusList, template:'#= status #' },
                         { 'title': 'Labor Total','field': 'laborTotal', 'width': 85, 'format': '{0:c2}'   },
                         { 'title': 'Parts Total','field': 'partsTotal', 'width': 85, 'format': '{0:c2}'   },
                         { 'title': 'Sublet Total','field': 'subletTotal', 'width': 85, 'format': '{0:c2}'   },
                         { 'title': 'Misc Total','field': 'miscTotal', 'width': 85, 'format': '{0:c2}'   },
                         { 'title': 'Line Total','field': 'lineTotal', 'width': 85, 'format': '{0:c2}'   },
                         { command: ['edit','destroy'], title: '&nbsp;' },
                      ]"
            data-bind="source: lines"
            data-editable="inline"
            data-detail-init="repairOrderModel.detailInit"
            data-detail-template="detailTemplate"
            style="width: 100%" class="table table-striped">
        </div>
    </div>

    <!-- Unexpected Error Dialog -->
    <div id="error_window">An unknown error occured. </div>

    <!-- Related List View -->
    <!-- <apex:relatedList list="Estimate_Approvals__r"  />-->
    <apex:relatedList list="dealer__Cashiering__r" />
    <apex:relatedList list="CombinedAttachments" />
    <apex:relatedList list="OpenActivities" />
    <apex:relatedList list="ActivityHistories" />

    <!-- Placeholder Notification element -->
    <span id="staticNotification"></span>

    <script type="text/x-kendo-template" id="detailTemplate">
        <div class="tabstrip">
            <ul>
                <li data-type="cccTab" class="k-state-active cccTab">
                   Concern/Cause/Correction
                </li>
                <li data-type="partsTab" class="partsTab">
                    Parts
                </li>
                <li data-type="techTimeTab" class="techTimeTab">
                    Tech Time
                </li>
                <li data-type="posTab" class="posTab">
                    Purchase Orders
                </li>
                <li data-type="miscChargesTab" class="miscChargesTab">
                    Misc Charges
                </li>
            </ul>
            <div class="form-horizontal threec">
                <div class="row">
                    <div class="col-md-12">
                        <div class="form-group">
                            <label class="col-sm-1">Concern</label>
                            <div class="col-md-8">
                                <textarea disabled="disabled" maxlength="3000" class="form-control concern autoHeight" data-bind="value: concern" ></textarea>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-12">
                        <div class="form-group">
                            <label class="col-sm-1">Cause</label>
                            <div class="col-md-8">
                                <textarea disabled="disabled" maxlength="255" class="form-control cause autoHeight" data-bind="value: cause" ></textarea>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-12">
                        <div class="form-group">
                            <label class="col-sm-1">Correction</label>
                            <div class="col-md-8">
                                <textarea disabled="disabled" maxlength="3000" class="form-control correction autoHeight" data-bind="value: correction" ></textarea>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div>
                <div class="parts"></div>
            </div>
            <div>
                <div class="techtime"></div>
            </div>
            <div>
                <div class="pos"></div>
            </div>
            <div>
                <div class="miscTable"></div>
            </div>
        </div>
    </script>

    <script type="text/x-kendo-template" id="poToolbatTemplate">
        <div class="toolbar">
            <a class="k-button k-button-icontext k-grid-add new_po" href="\\#">
                <span class="k-icon k-add"></span>Sublet Purchase Order
            </a>

            <a class="k-button k-button-icontext k-grid-add parts_po" href="\\#">
                <span class="k-icon k-add"></span>Parts Purchase Order
            </a>
        </div>
    </script>

    <script type="text/x-kendo-template" id="technameTemplate">
        <span>
            # if( typeof dealer__Technician__r != 'undefined') { #
                #= dealer__Technician__r.Name #
            # } else { #
                #: kendo.toString('') #
            # } #
        </span>
    </script>
    <!-- Parts Editor Template -->
    <script id="popupEditorTempalte" type="text/x-kendo-template">
        <div id="force" class="wrapper">
            <div class="col-sm-8">
                <div class="form-group">
                    <label for="name">Part Number</label>
                        <input name="PartName" class="PartName" id="PartName" />
                </div>
            </div>

            <div class="col-sm-4 table_column">
                <div id="qtyTable" data-role="grid"
                    data-columns="[
                                 { 'title': 'Store','field': 'store' },
                                 { 'title': 'QTY','field': 'qty' },
                              ]"
                    data-source="repairOrderModel.storeInventoryDataSource" 
                    data-scrollable="true"
                    data-auto-bind="false"
                    style="width: 100%; max-height: 400px" class="table table-striped"></div>
            </div>

            <div class="col-sm-8">
                <div class="form-group">
                    <label for="PartDescription">Part Description</label>
                        <input name="PartDescription" class="PartDescription form-control" id="PartDescription" />
                </div>
            </div>

            <div class="col-sm-4">
                <div class="form-group">
                    <label for="QTY">QTY Requested</label><br />
                    <input type="number" data-bind="value: QTY" name="QTY" class="QTY form-control halfWide" />
                </div>
                <div class="form-group">
                    <label for="Order">QTY Order</label><br />
                    <input type="number" data-bind="value: Order" name="Order" class="Order form-control halfWide" />
                </div>
                <div class="form-group">
                    <label for="Negative">QTY Negative Sale</label><br />
                    <input type="number" data-bind="value: Negative" name="Negative" class="Negative form-control halfWide" disabled />
                </div>
            </div>

            <div class="col-sm-4">
                <div class="form-group">
                    <label>On Hand / On Order</label><br />
                    <input type="number" data-bind="value: OnHand" name="OnHand" class="OnHand form-control"  disabled /> / 
                    <input type="number" data-bind="value: OnOrder" name="OnOrder" class="OnOrder form-control" disabled  />
                </div>
                <div class="form-group">
                    <label>List / Net</label><br />
                    <input type="number" data-bind="value: ListPrice" name="ListPrice" class="ListPrice form-control halfWide"  disabled />
                    / <input type="number" data-bind="value: Cost" name="Cost" class="Cost form-control halfWide"  disabled />
                </div>
                <div class="form-group">                
                    <label>Sale Price</label>
                    <div class="input-group">
                        <span class="input-group-addon">$</span>
                        <input type="number" data-bind="value: SalePrice" name="SalePrice" class="SalePrice form-control halfWide" />
                    </div>
                </div>
            </div>

            <div class="col-sm-4" style="clear:left" >
                <div class="form-group">
                    <label>Line</label>
                    <input type="text" class="name" name="name"
                            data-role="dropdownlist"
                            data-bind="value: ServiceJobId"
                            data-source="repairOrderModel.lines.data()"
                            data-auto-bind="true"
                            data-value-primitive="true"
                            data-text-field="lineNumber"
                            data-value-field="Id" 
                            style="width: 100%;" />
                </div>
            </div>
            <!-- <div class="col-sm-4">
                <div class="form-group">
                    <label for="QTY">EXT Total</label><br />
                    <div class="input-group">
                        <span class="input-group-addon">$</span>
                        <input type="number" data-bind="value: extPrice" name="extPrice" class="extPrice form-control" disabled />
                    </div>
                </div>
            </div -->
        </div>
    </script>

    <script>
        $dt = jQuery.noConflict();
        storeRowState = null;

        $dt(document).ready(function() {
            var postDate = '{!dealer__Service_Repair_Order__c.dealer__Posted_Date_Time__c}';
            if(postDate!='') {
                $dt('[name="cashier"]').each(function(i,el) {$dt(el).css('display', 'none');});
                $dt('[name="edit"]').each(function(i,el) {$dt(el).css('display', 'none');});
                $dt('[name="del"]').each(function(i,el) {$dt(el).css('display', 'none');});
                $dt('[name="inlineEditSave"]').each(function(i,el) {$dt(el).css('display', 'none');});
                $dt('[name="inlineEditCancel"]').each(function(i,el) {$dt(el).css('display', 'none');});
                
            }
            // poToolbatTemplate click events
            $dt('#grid').on('click', '.new_po', function(e){
                e.preventDefault();
                var grid = $dt("#grid").data("kendoGrid");
                var dataItem = grid.dataItem( $dt(e.currentTarget).closest("tr").prev('.k-master-row') );
                window.location.href = '/apex/dealer__PurchaseOrder?ro='+ dataItem.dealer__Repair_Order_Id__c + '&job=' + dataItem.Id ;
                // https://dealer.cs13.visual.force.com/apex/PurchaseOrder?ro=a25W000000077hW&job=a24W0000000UUFT
            });

            // New Parts PO
            $dt('#grid').on('click', '.parts_po', function(e){
                e.preventDefault();
                var grid = $dt("#grid").data("kendoGrid");
                var dataItem = grid.dataItem($dt(e.currentTarget).closest("tr").prev('.k-master-row'));
                window.location.href = '/apex/dealer__PurchaseOrder?parts_order=true&ro='+ dataItem.dealer__Repair_Order_Id__c + '&job=' + dataItem.Id ;
            });

            // Show detial when clicking on
            $dt('#grid').on('click', ".k-master-row td span", function (e) {
                // console.log(grid.dataItem( $dt(this).closest('tr') ) );
                grid.expandRow(  $dt(this).closest('tr')  );
                $dt(this).closest('tr').find('.autoHeight').css('height', this.scrollHeight + (this.offsetHeight - this.clientHeight));
            });

        });

        $dt(window).load(function() {
            // once the document has loaded
            openRows();     
        });

        var errorWin = $dt("#error_window").kendoWindow({
                    actions: ["Close"],
                    // draggable: false,
                    // height: "600px",
                    modal: true,
                    // resizable: false,
                    title: "Error : Uanble to complete",
                    // width: "500px",
                    visible: false
                }).data("kendoWindow");        

        var repairOrderModel = kendo.observable({
            id: getParameterByName('id'),
            roId: getParameterByName('id'),
            editable: {!(ISBLANK(dealer__Service_Repair_Order__c.dealer__Posted_Date_Time__c))},
            lines: new kendo.data.DataSource({
                schema: {
                    model: {
                        id: "Id",
                        fields: {
                            lineNumber: { from: "dealer__Line_Number__c",type: "string",editable:false },
                            laborTotal: { from: "dealer__Labor_Charges__c",type: "number" ,editable:false},
                            partsTotal: { from: "dealer__Parts_Total__c",type: "number",editable:false },
                            subletTotal: { from: "dealer__Sublet_Total__c",type: "number" ,editable:false},
                            lineTotal: { from: "dealer__Line_Total__c",type: "number" ,editable:false},
                            miscTotal: { from: "dealer__Misc_Charges__c",type: "number" ,editable:false},
                            opCode: { from: "dealer__Standard_Operation_Code__c",type: "string" },
                            opCodeName: { from: "dealer__Standard_Operation_Code__r.Name", type: "string" },
                            concern: { from: "dealer__CustomerConcern__c",type: "string" },
                            cause: { from: "dealer__Cause__c",type: "string" },
                            correction: { from: "dealer__Correction__c", type: "string" },
                            laborType: { from: "dealer__Labor_Type__c",type: "string" },
                            status: { from: "dealer__Stat__c",type: "string", defaultValue: "Open" },
                        }
                    },
                    errors: "error",
                    parse: function(response) {
                        for (var i = 0; i < response.length; i++) {
                            // Add Op Code Name
                            if(typeof response[i].dealer__Standard_Operation_Code__r == 'undefined') {
                                response[i].dealer__Standard_Operation_Code__r = {name: null}
                            }
                        }
                        return response;
                    }
                },
                // batch: true,
                // autoSync: true,
                transport: {
                    read: {
                        url: "/apex/servicetrs",
                        data: {
                            id: getParameterByName('id'),
                            action: 'rolines'
                        }
                    },
                    update: {
                        url: "/apex/servicetrs",
                        data: {
                            action: 'update'
                        },
                        method: 'POST',
                        complete: function(data) {
                            reloadDetail();
                        }                       

                    },
                    create: {                   
                        url: "/apex/servicetrs",
                        data: {
                            action: 'create',
                            rid: getParameterByName('id')
                        },
                        method: 'POST'
                    },
                    destroy: {
                        url: "/apex/servicetrs",
                        data: {
                            action: 'delete_line',
                        },
                        method: 'POST',
                    }
                },
                error: function(e) {
                    console.log(e.errors); // displays "Invalid query"
                    repairOrderModel.gridNotification(e.errors);
                    // If Line exists in Model with error, remove the line;


                },
                change: function(e) {
                    // console.log('Data Change Fired see line data V');
                    // var data = this.data();
                    // console.log(data);
                    // openRows();

                },
                dataBound: function(e) {
                    openRows();
                }
            }),
            gridNotification: function(msg, append) {
                if(typeof append == 'undefined') {
                    append = '#force';
                }
                if(typeof msg == 'undefined') {
                    msg = 'An unknown error occured';
                }
                var _notif = $dt("#staticNotification").kendoNotification({
                        appendTo: append,
                        autoHideAfter: 0,
                        stacking: "up"
                    }).data("kendoNotification");
                _notif.show(msg, "error");
            },
            techDetailData: null, 
            techDetailTotal: null, 
            detailInit: function (e) {
                // bind parent data to sub-detailTow
                kendo.bind(e.detailRow, e.data);

                // setup parent row data
                var parentRow = e.data;

                // console.log('parentRow');
                // console.log(e.data);

                var detailRow = e.detailRow;
                var tabstrip = detailRow.find(".tabstrip").kendoTabStrip({
                    animation: {
                        open: { effects: "fadeIn" }
                    },
                    show: function(_tab){
                        // Save the active tab 
                        var state = storeRowState;
                        if (state) {
                            // state = JSON.parse(state);
                            for (var row in state) {
                                if (row == parentRow.id ) {
                                    var obj = state[row];
                                    state[row] = {};
                                    obj.tabClass = $dt(_tab.item).data('type');

                                    state[row] = obj;
                                }
                            }
                        }
                        storeRowState = state;
                        // sessionStorage.setItem("grid", JSON.stringify(state));
                        
                        // Hide Add Line buttons in detail tables.
                        removeAddLine();
                    }
                });
                // Set up data for parts read.
                var _partsData = [];
                    if( typeof e.data.dealer__Technician_Job_Times__r != 'undefined') {
                        _partsData = e.data.dealer__Technician_Job_Times__r.records;
                    }
                    var partModel = kendo.data.Model.define({
                        id: "Id",
                        fields: {

                            Id: { from: "Id",type: "string" },
                            ServiceJobId: { from: "ServiceJobId",type: "string" },
                            PartName: { from: "PartName",type: "string" },
                            PartMasterId: { from: "PartMasterId",type: "string" },
                            PartInventoryId: { from: "PartInventoryId",type: "string" },
                            PartDescription: { from: "PartDescription",type: "string" },
                            SalePrice: { from: "SalePrice",type: "number" },
                            Cost: { from: "Cost",type: "number" },
                            ExtendedTotal: { from: "ExtendedTotal",type: "number" },
                            QTY: { from: "QTY",type: "number",defaultValue: 1 },
                            ListPrice: { from: "ListPrice",type: "number" },

                            // Additional Modal Fields
                            Order: { from: "Order",type: "number" },
                            Negative: { from: "Negative",type: "number" },
                            OnHand: { from: "OnHand",type: "number" },
                            OnOrder: { from: "OnOrder",type: "number" },
                            // extPrice: { type: "number" },
                        },
                        extPrice: function() {
                            return (this.QTY * this.SalePrice);
                        }
                    });

                    detailRow.find(".parts").kendoGrid({
                        dataSource: {
                            // data: _partsData,
                            // lid=a24W0000000UUFiIAO&action=read_parts
                            transport: {
                                read: {
                                    url: "/apex/servicetrs",
                                    data: {
                                        lid: parentRow.Id,
                                        action: 'read_parts'
                                    }
                                },
                                update: {
                                    url: "/apex/servicetrs",
                                    data: {
                                        action: 'update_parts_Line'
                                    },
                                    method: 'POST',
                                    dataType : 'json',
                                    complete: function(data) {
                                        repairOrderModel.lines.read();
                                        reloadDetail();
                                        openRows();
                                    }

                                },
                                create: {
                                    url: "/apex/servicetrs",
                                    data: {
                                        action: 'create_parts_Line',
                                        rid: parentRow.Id
                                    },
                                    method: 'POST',
                                    dataType : 'json',
                                    complete: function(data) {
                                        console.log('Looking at the data for errors');
                                        if(!errorTrap(data)) {
                                            repairOrderModel.lines.read();
                                            reloadDetail();
                                            openRows();
                                        }
                                    }
                                },
                                destroy: {
                                    url: "/apex/servicetrs",
                                    data: {
                                        action: 'delete_parts_Line',
                                    },
                                    method: 'POST',
                                    dataType : 'json',
                                    complete: function(data) {
                                        repairOrderModel.lines.read();
                                        reloadDetail();
                                        openRows();
                                    }
                                }
                            },
                            schema: {
                                model: partModel,
                                // errors: "error"
                            },
                            error: function(e) {
                                // Prevent window from closing if there is an error
                                detailRow.find(".parts").data('kendoGrid').one("dataBinding", function (ev) {
                                    ev.preventDefault();

                                });

                                // re-enable save button because there was an error
                                $dt('.k-edit-form-container .k-grid-update').prop('disabled', false);

                                // make a prettier error message, even if HTML is returned.
                                if(e.xhr != null) {
                                    var responseString = e.xhr.responseText  ;
                                    var skinnySource = $dt(e.xhr.responseText).find('#bodyCell');
                                    if(skinnySource.length > 0) {
                                        skinnySource.addClass('k-widget k-notification k-notification-error')
                                        errorWin.content(skinnySource);
                                        // errorWin.content('<span class="k-notification k-notification-error">'+skinnySource+'</span>');
                                    } else {
                                        errorWin.content(responseString);
                                    }
                                    errorWin.open().center();
                                } else {
                                    if(typeof e.errors != 'undefined') {
                                        // $dt('<div class="k-widget k-notification k-notification-error">'+e.errors+'</div>').insertAfter('.k-edit-form-container wrapper');
                                        $dt('.k-edit-form-container').append('<div class="k-widget k-notification k-notification-error">'+e.errors+'</div>');
                                    }
                                }
                                errorWin.open().center();
                            }
                        },
                        toolbar: [{name:'create',text:'Add Part Line'}],
                        columns:[
                            {title:'Part No.', field:'PartName'},
                            {title:'Description', field:'PartDescription'},
                            {title:'QTY', field:'QTY'},
                            {title:'Retail', field:'ListPrice', format: "{0:c2}" },
                            {title:'Sale', field:'SalePrice', format: "{0:c2}" },
                            {title:'Ext. Total', field:'ExtendedTotal', format: "{0:c2}" },
                            { command: ['edit','destroy'], title: '&nbsp;' },
                        ],
                        editable: {
                            mode: "popup",
                            template: kendo.template($dt("#popupEditorTempalte").html())
                        },
                        edit: function (e) { 

                            partModel.bind('change',function(e) {
                                    console.log('changed');
                                    console.log(e);
                            });

                            // edit pop-up size
                            var editWindow = this.editable.element.data("kendoWindow");
                            editWindow.wrapper.css({ width: 680 });

                            // var _partLine = e.model;
                            // var _partLine = this.dataItem( $dt(e.sender.element[0]).closest('tr') );
                            var _partLine = this.dataSource.getByUid( e.model.uid );                            

                            $dt('.QTY').on('change', function(){
                                var sV = $dt('.ListPrice').val();
                                _partLine.set('SalePrice', sV);
                            }); 
                            $dt('.k-window-title').html("<h3>LINE #"+parentRow.lineNumber+" : "+parentRow.opCodeName+" </h3>"); 

                            console.log('_partLine');
                            console.log(_partLine);
                            console.log(_partLine.isNew());

                            console.log('Datasource' );
                            console.log(this.dataSource.getByUid( e.model.uid ));

                            var _partQtyGrid = $dt(editWindow.wrapper).find('#qtyTable').data("kendoGrid");

                            // Render AUTOCOMPLETE
                            var autocomplete = $dt(editWindow.wrapper).find('#PartName').kendoAutoComplete({
                                minLength: 2,
                                filter: 'conatins',
                                dataTextField: "PartName",
                                valuePrimitive: true,
                                // autoBind: false,
                                template: '<strong>#:PartName #</strong> : #:PartDescription # <span class="text-muted"><strong>MFG:</strong> #: PartMFG # </span>',
                                
                                dataSource: repairOrderModel.partSearchDataSource,
                                // height: 370
                                select: function(e){
                                    var _partMaster = this.dataItem(e.item) ;

                                    console.log(e.item);

                                    // Render table after select
                                    _partQtyGrid.dataSource.read({mid:_partMaster.PartMasterId});

                                    $dt.ajax({
                                        method: "POST",
                                        url: "/apex/servicetrs",
                                        data: { 
                                            action: "part", 
                                            mid: _partMaster.PartMasterId,
                                            lid: '{!dealer__Service_Repair_Order__c.dealer__Company__c}',
                                            roid: '{!dealer__Service_Repair_Order__c.Id}'
                                        }
                                    })
                                    .done( function( results ) {
                                        console.log(results);
                                        // Setup the parts
                                        // _partQtyGrid.dataSource.read({ mid:results.PartMasterId });

                                        _partLine.set('PartName',results.PartName);
                                        _partLine.set('PartMasterId',results.PartMasterId);
                                        _partLine.set('PartInventoryId',results.PartInventoryId);

                                        _partLine.set('PartDescription',results.PartDescription);
                                        _partLine.set('OnOrder',results.OnOrder);
                                        _partLine.set('OnHand',results.OnHand);
                                        _partLine.set('ListPrice',results.ListPrice);
                                        _partLine.set('SalePrice',results.SalePrice);

                                        console.log('afterUpdate of autocomplete');
                                        console.log(_partLine);
                                    });

                                }
                            }).data("kendoAutoComplete");
                        },
                        save: function(e){
                            // prevent update button from beiong clicked twice
                            $dt('.k-edit-form-container .k-grid-update').prop('disabled', true);
                        }
                    });
                
                // Set up data for tech time read.
                var _techData = [];
                    if( typeof parentRow.dealer__Technician_Job_Times__r != 'undefined') {
                        _techData = parentRow.dealer__Technician_Job_Times__r.records;
                    }
                    // console.log('tech data');
                    detailRow.find(".techtime").kendoGrid({
                        dataSource: {
                            // data: _techData,
                            transport: {
                                read: {
                                    url: "/apex/servicetrs",
                                    data: {
                                        lid: parentRow.Id,
                                        action: 'read_tech_time'
                                    }
                                },
                                update: {
                                    url: "/apex/servicetrs",
                                    data: {
                                        action: 'update_tech_time'
                                    },
                                    method: 'POST',
                                    complete: function(data) {
                                        // _totalLabor();
                                        repairOrderModel.lines.read();
                                        reloadDetail();
                                        openRows();
                                    }
                                },
                                create: {
                                    url: "/apex/servicetrs",
                                    data: {
                                        action: 'create_tech_time',
                                        rid: getParameterByName('id'),
                                        lid: parentRow.Id,
                                    },
                                    method: 'POST',
                                    complete: function(data) {
                                        repairOrderModel.lines.read();
                                        reloadDetail();
                                        openRows();
                                    }
                                },
                                destroy: {
                                    url: "/apex/servicetrs",
                                    data: {
                                        action: 'delete_tech_time',
                                        rid: getParameterByName('id'),
                                        lid: parentRow.Id,
                                    },
                                    complete: function(data) {
                                        repairOrderModel.lines.read();
                                        reloadDetail();
                                        openRows();
                                    }
                                },
                                parameterMap: function(data, type) {
                                    if (type == "create" || type == "update" ) {
                                        data.dealer__Date__c = moment( data.dealer__Date__c ).format('MM/DD/YYYY');
                                    }
                                    return data;
                                }
                            },
                            schema: {
                                model: {
                                    id: "Id",
                                    fields: {
                                        dealer__Date__c: {from:'dealer__Date__c', type: 'date' },
                                        dealer__Actual_Time_Entry__c: {from:'dealer__Actual_Time_Entry__c', type: 'number' } ,
                                        dealer__Service_Job_Line__c: {from:'dealer__Service_Job_Line__c', type: 'text' } ,
                                        Payment_Method_Rate__c: {from:'dealer__Payment_Method_Rate__c', type: 'number', editable: false } ,
                                        dealer__Labor_Total__c: {from:'dealer__Labor_Total__c', type: 'number', editable: false } ,
                                        dealer__Job_Line_Number__c: {from:'dealer__Job_Line_Number__c', type: 'number' } ,
                                        newLineId: { type: 'text', defaultValue: null } ,
                                        // Labor_Total__c: {from:'Labor_Total__c', type: 'number' } // This should be the field ... 
                                    }
                                }
                            }
                        },
                        editable: 'inline',
                        toolbar: [
                           {'name': 'create', 'text': 'Add Time'}
                        ],
                        columns:[
                            { title:'Technician', field:'dealer__Technician__c', editor: techList, template: repairOrderModel.technameTemplate},
                            { title:'Date', field:'dealer__Date__c',format: "{0: MM/dd/yyyy }" },
                            // {title:'Date', field:'dealer__Date__c',format: "{0: MM/dd/yyyy }",editor: dateField},
                            { title:'Time', field:'dealer__Actual_Time_Entry__c' },
                            { title:'Rate', field:'dealer__Payment_Method_Labor_Rate__c' },
                            { title:'Ext. Total', field:'dealer__Labor_Total__c' , 'format': '{0:c2}', editor: techLaborTotal, template: '#=dealer__Labor_Total__c#' },
                            { title:'Line', field:'newLineId', width: 75, editor: techLineNumber, template: '#=dealer__Job_Line_Number__c#' },
                            { command: ['edit','destroy'], title: '&nbsp;' }
                        ]
                    });

                // Set up POS data for table read.
                var _posData = [];
                    if( typeof parentRow.dealer__Purchase_Order_Line__r != 'undefined') {
                        _posData = parentRow.dealer__Purchase_Order_Line__r.records;
                    }
                    detailRow.find(".pos").kendoGrid({
                        // editable: 'inline',
                        dataSource: {
                            data: _posData,
                            // filter: { field: "EmployeeID", operator: "eq", value: e.data.EmployeeID }
                        },
                        columns:[
                            {command: [{ name:'Print Purchase Order', title:'Print', click:PrintPurchaseOrder},{ name:'View Edit Purchase Order', title:'View', click:EditPurchaseOrder}]},
                            {title:'Name', field:'dealer__Purchase_Order__r.Name'},
                            {title:'Description', field:'dealer__Description__c'},
                            {title:'Amount', field:'dealer__Amount__c', format: "{0:c2}" },
                        ],
                        toolbar: kendo.template($dt("#poToolbatTemplate").html()),
                    });

                // set up misc table
                var _miscData = [];
                    if( typeof parentRow.Service_Misc_Charge__r != 'undefined') {
                        _miscData = parentRow.Service_Misc_Charge__r.records;
                    }
                    detailRow.find(".miscTable").kendoGrid({
                        editable: 'inline',
                        dataSource: {
                            // data: _miscData,
                            transport: {
                                read: {
                                    url: "/apex/servicetrs",
                                    data: {
                                        lid: parentRow.Id,
                                        action: 'read_misc'
                                    }
                                },
                                update: {
                                    url: "/apex/servicetrs",
                                    data: {
                                        action: 'update_misc',                                      
                                        rid: getParameterByName('id'),
                                        lid: parentRow.Id,
                                    },
                                    method: 'POST',
                                    complete: function(data) {
                                        repairOrderModel.lines.read();
                                        reloadDetail();
                                        openRows();
                                    }
                                },
                                create: {
                                    url: "/apex/servicetrs",
                                    data: {
                                        action: 'create_misc',
                                        rid: getParameterByName('id'),
                                        lid: parentRow.Id,
                                    },
                                    method: 'POST',
                                    dataType : 'json',
                                    complete: function(data) {
                                        repairOrderModel.lines.read();
                                        reloadDetail();
                                        openRows();
                                    }
                                },
                                destroy: {
                                    url: "/apex/servicetrs",
                                    data: {
                                        action: 'delete_misc',
                                        rid: getParameterByName('id'),
                                        lid: parentRow.Id,
                                    },
                                    complete: function(data) {
                                        repairOrderModel.lines.read();
                                        reloadDetail();
                                        openRows();
                                    }
                                }
                            },
                            schema: {
                                model: {
                                    id: "Id",
                                    fields: {
                                        Name: {from:'Name', type: 'string', editable: false },
                                        Amount: {from:'dealer__Amount__c', type: 'number' } ,
                                        Type: {from:'dealer__Type__c', type: 'text' } ,
                                        newLineId: { type: 'text', defaultValue: null } ,
                                        Service_Job_Line__c: {from:'dealer__Service_Job_Lines__c', type: 'string' } ,
                                        ServiceLineNumber: {from:'dealer__Service_Job_Lines__r.dealer__Line_Number__c', type: 'string' } 
                                    }
                                }
                            },
                            error: function(e){
                                // make a prettier error message, even if HTML is returned.
                                if(e.xhr != null) {
                                    var responseString = e.xhr.responseText  ;
                                    var skinnySource = $dt(e.xhr.responseText).find('#bodyCell');
                                    if(skinnySource.length > 0) {
                                        skinnySource.addClass('k-widget k-notification k-notification-error')
                                        errorWin.content(skinnySource);
                                        // errorWin.content('<span class="k-notification k-notification-error">'+skinnySource+'</span>');
                                    } else {
                                        errorWin.content(responseString);
                                    }
                                    errorWin.open().center();
                                } else {
                                    if(typeof e.errors != 'undefined') {
                                        // $dt('<div class="k-widget k-notification k-notification-error">'+e.errors+'</div>').insertAfter('.k-edit-form-container wrapper');
                                        $dt('.k-edit-form-container').append('<div class="k-widget k-notification k-notification-error">'+e.errors+'</div>');
                                    }
                                }
                                errorWin.open().center();
                            }
                        },
                        toolbar: [ {name:'create', text:'Add Misc Line'}], 
                        columns:[
                            // {title:'Name', field:'Name'},
                            {title:'Type', field:'Type',editor: miscTypeSelect },
                            {title:'Amount', field:'Amount', format: "{0:c2}" },
                            {title:'Line', field:'newLineId', width: 75, editor: techLineNumber, template: '#=ServiceLineNumber#' },
                            { command: ['edit','destroy'], title: '&nbsp;' }
                        ]
                    });

                detailRow.find('.autoHeight').on('keyup input', function(el) { 
                    resizeTextarea(this) ;
                });
                $dt.each( $dt('.autoHeight'), function(i, el){
                    // console.log(this);
                    $dt(this).css('height', this.scrollHeight + (this.offsetHeight - this.clientHeight)); 
                });
            },
            svcCodesDataSource: new kendo.data.DataSource({
                transport: {
                    read: {
                        url: "/apex/servicetrs",
                        data: {
                            action: 'operations'
                        }
                    },
                },
                schema: {
                    parse: function(data) {
                        // Ensure some fields are set before displaying
                        for (var i = 0; i < data.length; i++) {
                            if(typeof data[i].dealer__Primary_Category__c == 'undefined') {
                                data[i].dealer__Primary_Category__c = 'Uncategorized';
                            }

                            if(typeof data[i].dealer__Op_Code_Description__c == 'undefined') {
                                data[i].dealer__Op_Code_Description__c = '';
                            }
                        };
                        // console.log(data);
                        return data;
                    }
                },
                group :{field: 'dealer__Primary_Category__c' }
            }),
            paymentTypesDataSource: new kendo.data.DataSource({
                transport: {
                    read: {
                        url: "/apex/servicetrs",
                        data: {
                            action: 'PicklistValues',
                            object: 'dealer__Service_Job__c',
                            field: 'dealer__Labor_Type__c',
                        }
                    }
                }
            }),
            statusSource: new kendo.data.DataSource({
                transport: {
                    read: {
                        url: "/apex/servicetrs",
                        data: {
                            action: 'stat'
                        }
                    }
                }
            }),
            partSearchDataSource: new kendo.data.DataSource({
                transport: {
                    read: {
                        url: "/apex/servicetrs",
                        data: {
                            action: 'search_parts'
                        }
                    }
                },
                schema: {
                    model: {
                        id: "PartMasterId",
                        fields: {
                            PartName: { from: "PartName",type: "string" },
                            PartMFG: { from: "PartMFG",type: "string" },
                            PartMasterId: { from: "PartMasterId",type: "string" },
                            PartDescription: { from: "PartDescription",type: "string" },
                            search_display: { from: "search_display",type: "string" }
                        }
                    },
                },
                serverFiltering: true
            }),
            storeInventoryDataSource: new kendo.data.DataSource({
                transport: {
                    read: {
                        url: "/apex/servicetrs",
                        data: {
                            action: 'global_inventory'
                        }
                    }
                }
            }),
            technameTemplate: kendo.template($dt("#technameTemplate").html()),
            // partTemplate: kendo.template($dt("#partTemplate").html()),
            
        }); 
        // BIND Model: repairOrderModel to Grid
        kendo.bind( $dt("#grid"), repairOrderModel);

        // GET GRID AND DATA
        var grid = $dt("#grid").data("kendoGrid");

        // Bind to edit event of row
        grid.bind("edit", function (e) {
            // if (!e.model.isNew()) {}
            grid.expandRow(e.container);
            console.log(e.container);
            // Enable textareas on edit
            $dt(e.container).next('.k-detail-row').find('textarea:disabled').prop('disabled', false);

            // Deactivate tabs if this is a new line
            $dt(e.container).next('.k-detail-row').find('textarea:disabled').prop('disabled', false);

            // Disable tabs if line is new
            if ( e.model.isNew() ) {
                var tabStrip = $dt(e.container).next('.k-detail-row').find('.tabstrip');
                var tabKendo = tabStrip.data("kendoTabStrip");

                tabKendo.disable( tabStrip.find('.partsTab') );
                tabKendo.disable( tabStrip.find('.techTimeTab') );
                tabKendo.disable( tabStrip.find('.posTab') );
                tabKendo.disable( tabStrip.find('.miscChargesTab') );
            }
            
        });

        // Bind to canel event of row
        grid.bind("cancel", function(e){
            // CLose the opened row if editing is canceled.
            grid.collapseRow(e.container);
            // Disable textareas on cancel
            $dt(e.container).next('.k-detail-row').find('.threec textarea').prop('disabled', 'disabled');
        });

        // Bind to canel event of row
        grid.bind("save", function(e){
            // Re-open rows
            openRows();
            // Disable textareas on cancel
            $dt(e.container).next('.k-detail-row').find('.threec textarea').prop('disabled', 'disabled');
        });

        // Bind to detail expansion - 
        grid.bind("detailExpand", function(e){

            // remember detail expansions
            // if not a new line
            if ( this.dataItem(e.masterRow).id != '' ) {
                var state = storeRowState;
                
                if (!state) {
                  state = {};
                } else {
                  // state = JSON.parse(state);
                  state = storeRowState;
                }

                var activeClass = e.detailRow.find('.k-state-active').data('type');

                if (!state.hasOwnProperty( this.dataItem(e.masterRow).id )) { // Prevent from double adding the row.
                    state[ this.dataItem(e.masterRow).id ] = { 
                        id: this.dataItem(e.masterRow).id, 
                        open: true, 
                        // TODO: possibly fix this this. resets the tabs each time the page loads.
                        tabClass: activeClass
                    };
                } // Prevent from double adding the row.

                // sessionStorage.setItem("grid", JSON.stringify(state));
                storeRowState = state;
            }

            // Hide Add Line buttons in detail tables.
            removeAddLine();
        });

        // Bind to detail collapse event
        grid.bind("detailCollapse", function(e){
            console.log('collapse fired');
            // if not a new line
            if (this.dataItem(e.masterRow).id != '') {

                // var state = sessionStorage.getItem("grid");
                var state = storeRowState;
                
                if (state) {
                  // state = JSON.parse(state);
                  
                  delete state[this.dataItem(e.masterRow).id];
                    console.log(state);
                  
                  // sessionStorage.setItem("grid", JSON.stringify(state));
                  storeRowState = state;
                }
            }
        });

        // Bind to detail collapse event
        grid.bind("remove", function(e){
            console.log('remove fired');
            console.log('e.model');

            // var state = sessionStorage.getItem("grid");
            var state = storeRowState;
            
            if (state) {
              // state = JSON.parse(state);
              
              delete state[e.model.id];
                console.log(state);
              
              // sessionStorage.setItem("grid", JSON.stringify(state));
              storeRowState = state;
            }
            
        });

        // Hide Delete buttons if there is a line total > 0
        grid.bind("dataBound", function(e){
            // grid.collapseRow(e.container);
            $dt('#grid').find('.k-master-row').each( function(i,el) {
                var rowData = grid.dataItem(el);

                if( typeof rowData.lineTotal != 'undefined' ) {
                    if( rowData.lineTotal > 0 ) {
                        $dt(el).find('.k-grid-delete').hide();
                    }
                }
            });

            openRows();
            removeAddLine();
        });

        // Disable Add row button
        function removeAddLine() {
            if(!repairOrderModel.editable) {
                // Remove Table Toolbar button
                $dt('.k-header .k-grid-add').remove();

                // Disable Line specific Actions
                $dt('.k-button.k-grid-edit, .k-button.k-grid-delete ')
                    .addClass('k-state-disabled')
                    .prop('disabled',true).
                    click(function(e){
                        e.preventDefault();
                    });
            }
        }

        // Render tech list in editable row
        function opCodeList(container, options) {
            $dt('<input class="opCodeSel" required data-text-field="Name" data-value-field="Id" data-bind="value:' + options.field + '"/>')
                .appendTo(container)
                .kendoDropDownList({
                    // filter: 'contains',
                    // optionLabel: 'Choose Code...',
                    autoBind: true,
                    valuePrimitive: true,
                    template: '#: Name # <small>#:dealer__Op_Code_Description__c#</small>',
                    // text: options.model.Name,
                    dataSource: repairOrderModel.svcCodesDataSource,
                    select: function(e) {
                        var codeData = this.dataItem( e.item.index() );

                        var job_line =  $dt(e.sender.element[0]).closest('tr');
                        var jobData = grid.dataItem( job_line );

                        console.log(codeData.dealer__Pay_Type__c);
                        console.log(jobData);

                        // if( (jobData.concern == null || typeof jobData.concern == 'undefined') && typeof codeData.dealer__Concern__c != 'undefined' ) {
                        if(typeof codeData.dealer__Concern__c != 'undefined' ) {
                            jobData.set('concern', codeData.dealer__Concern__c);
                        }

                        if( (jobData.laborType == '' || jobData.laborType == null || typeof jobData.laborType == 'undefined') && typeof codeData.dealer__Pay_Type__c != 'undefined' ) {
                            jobData.set('laborType', codeData.dealer__Pay_Type__c);
                        }
                    },
                });
        }

        /** Column Editors */
        // Render tech list in editable row
        function PaymentMethodsList(container, options) {
            $dt('<input class="laborTypeSel" data-bind="value:' + options.field + '" />')
                .appendTo(container)
                .kendoDropDownList({
                    // filter: 'contains',
                    autoBind: true,
                    valuePrimitive: true,
                    dataSource: repairOrderModel.paymentTypesDataSource
                });
        }      

        function queryParams(s) {
          // This function is anonymous, is executed immediately and 
          // the return value is assigned to QueryString!
          var query_string = {};
          var query = s;
          var vars = query.split("&");
          for (var i=0;i<vars.length;i++) {
            var pair = vars[i].split("=");
                // If first entry with this name
            if (typeof query_string[pair[0]] === "undefined") {
              query_string[pair[0]] = decodeURIComponent(pair[1]);
                // If second entry with this name
            } else if (typeof query_string[pair[0]] === "string") {
              var arr = [ query_string[pair[0]],decodeURIComponent(pair[1]) ];
              query_string[pair[0]] = arr;
                // If third or later entry with this name
            } else {
              query_string[pair[0]].push(decodeURIComponent(pair[1]));
            }
          } 
          return query_string;
        }

        // Render Status Selectlist in editable row
        function statusList(container, options) {
            $dt('<input class="statusSel" data-text-field="label" data-value-field="value" data-bind="value:' + options.field + '"/>')
                .appendTo(container)
                .kendoDropDownList({
                    filter: 'contains',
                    // optionLabel: 'Choose Status...',
                    // text: options.model.status,
                    autoBind: true,
                    dataSource: repairOrderModel.statusSource
                });
        }

        // Render tech Selectlist in editable row
        function techList(container, options) {
            $dt('<input required data-text-field="Name" data-value-field="Id" data-bind="value:' + options.field + '"/>')
                .appendTo(container)
                .kendoDropDownList({
                    filter: 'contains',
                    text: options.model.dealer__Technician__c,
                    // autoBind: false,
                    dataSource: {
                        transport: {
                            read: {
                                url: "/apex/servicetrs",
                                data: {
                                    action: 'techs',
                                    rid: getParameterByName('id'),
                                }
                            }
                        },
                        schema: {
                            errors: "error" // error response is { "error": "Invalid query" }
                        },
                    }
                });
        }

        // render date picker in edital row
        function dateField(container, options) {
            $dt('<input data-bind="value:' + options.field + '"/>')
                .appendTo(container)
                .kendoDatePicker();
        }

        function techLineNumber( container, options ) {
            $dt('<input data-text-field="lineNumber" data-value-field="Id" data-bind="value:' + options.field + '"/>')
                .appendTo(container)
                .kendoDropDownList({
                    // autoBind: true,
                    valuePrimitive: true,
                    dataSource: {
                        data: repairOrderModel.lines.data()
                    }
                });
        }

        function techLaborTotal( container, options) {
            // 
        }

        // Render tech Selectlist in editable row
        function miscTypeSelect(container, options) {
            $dt('<input data-bind="value:' + options.field + '"/>')
                .appendTo(container)
                .kendoDropDownList({
                    // text: options.model.dealer__Technician__c,
                    // autoBind: false,
                    dataSource: {
                        transport: {
                            read: {
                                url: "/apex/servicetrs",
                                data: {
                                    action: 'misc_types'
                                }
                            }
                        }
                    }
                });
        }

        /** Utility Functions **/
        /*
        function getParameterByName(s, name) {
            name = name.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
            var regex = new RegExp("[\\?&]" + name + "=([^&#]*)"),
                results = regex.exec(s);
            return results === null ? "" : decodeURIComponent(results[1].replace(/\+/g, " "));
        } 
        */         

        function createPo(e){
            e.preventDefault();
            // var dataItem = this.dataItem($dt(e.currentTarget).closest("tr") );
            console.log( e );
            // console.log( dataItem );
            // window.location('/apex/PurchaseOrder?ro='+a25W000000077hW+'&job='+dataItem.Id)
            // https://dealer.cs13.visual.force.com/apex/PurchaseOrder?ro=a25W000000077hW&job=a24W0000000UUFT
        }

        function doParts(e) {
            e.preventDefault();

            var dataItem = this.dataItem($dt(e.currentTarget).closest("tr"));
            console.log(e);
            // console.log(dataItem);
            alert('Need to Hook up this button');
        }

        function doLabor(e) {
            e.preventDefault();
            var dataItem = this.dataItem($dt(e.currentTarget).closest("tr"));
            window.open('/' + dataItem.Id);
        }

        function openRows() {
            // var state = sessionStorage.getItem("grid");
            var state = storeRowState;
            var _grid = $dt("#grid").data("kendoGrid");

            if (state) {
                // console.log(state);
                // state = JSON.parse(state);

                for (var row in state) {

                    if (state.hasOwnProperty(row)) {

                        var obj = state[row];

                        // console.log(obj);

                        var dataItem = _grid.dataSource.get(obj.id);

                        console.log(dataItem);

                        // Make sure we received a dataItem
                        if(typeof dataItem != 'undefined') {
                            _grid.expandRow('tr[data-uid="' + dataItem.uid + '"]');

                            var tabStrip = $dt('tr[data-uid="' + dataItem.uid + '"]').next('.k-detail-row').find('.tabstrip');
                            var tabLink = tabStrip.find('.'+obj.tabClass);
                            tabStrip.data("kendoTabStrip").activateTab( tabLink );
                        }

                    }
                }
            }
        }

        function PrintPurchaseOrder(e) {
            e.preventDefault();
            var dataItem = this.dataItem($dt(e.currentTarget).closest("tr"));
            // console.log(dataItem);
            window.open('/apex/dealer__PurchaseOrderPDF?id=' + dataItem.dealer__Purchase_Order__c);
        }

        function EditPurchaseOrder(e) {
            e.preventDefault();
            var dataItem = this.dataItem($dt(e.currentTarget).closest("tr"));
            window.open('/apex/dealer__PurchaseOrder?id=' + dataItem.dealer__Purchase_Order__c);            
        }

        function getParameterByName(name) {
            name = name.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
            var regex = new RegExp("[\\?&]" + name + "=([^&#]*)"),
                results = regex.exec(location.search);
            return results === null ? "" : decodeURIComponent(results[1].replace(/\+/g, " "));
        }

        var resizeTextarea = function(el) {
            $dt(el).css('height', el.scrollHeight + (el.offsetHeight - el.clientHeight));
                // console.log(el.clientHeight);
        };

        /*
            Total all tech labor total items and populates the value in the datamodel
        */
        function _totalLabor() {
            lineId='a24W0000000UY70IAG';
            var lines = repairOrderModel.lines.data();
            if(lines.length==undefined) { return; }
            ServiceRepairOrder2.laborTotal(lineId, function(result, event){
                if(event.status) {
                    console.log(result);
                }
            });
        }

        function errorTrap(d) {
            console.log('Error Trap ');
            console.log(d);
            var json = null;
            try{
                json = JSON.parse(d.responseText);
            } catch(e){
                console.log('Unable to find the Response Text');
            }
             
            if(json !== null) {
                console.log(json);
                if(json.hasOwnProperty('error')) {
                    alert(json.error);
                }
            }
        }
    </script>

    <style>
        .header {
            margin: 20px 0;
        }

        #force th {
            padding: 3px 5px;
            /*font-size: 1.25em;*/
        }

        #force td {
            padding: 3px 5px;
        }

        #force .k-popup .k-list .k-item,.k-list-container ul li {
            /*padding-left: 0;*/
            margin: 0;
        }

        #force .no-margin {
            margin: 0;
        }

        #force .tabstrip ul {
            margin-top: 0;
            margin-bottom: 0; 
        }

        #force .table_column {
            min-height: 300px;
            /*width: 100%;*/
            float: right;
        }

        #force .OnHand, #force .OnOrder, #force .halfWide  {
            width: 75px;
            display: inline-block;
            clear: left;`
        }

        .wrapper, .k-widget.k-window {
            width: 680px;
        }

        .k-edit-form-container {
            width: 98% !important;
        }

        #force .PartName, #force .k-autocomplete, #force #PartDescription {
            width: 100%;
        }

        #force input.PartName {
            height: 32px;
        }

        #force span.PartName {
            height: 34px;
        }

        #PartName-list .k-item {
            border-bottom: 1px solid #f2f2f2;
            /*line-height: 1.2;*/
        }

        #PartName-list .k-item .text-muted {
            font-size: .85em;
            color: #999;
        }

        #force .k-master-row {
            border-top-width: 2px;
            border-top-style: solid;
            border-top-color: #BBB;
        }

        #force .k-grid tr .k-button {
            padding: 1px 5px;
            font-size: 12px;
            line-height: 1.5;
            border-radius: 3px;
        }
    </style>
</apex:page>